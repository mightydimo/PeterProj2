{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Settings from \"../constants/Settings\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { ButtonContainer } from \"../components/ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showAddPerson() {\n    props.navigation.replace('Root', {\n      screen: \"AddPerson\"\n    });\n  }\n  function showViewPerson(person) {\n    props.navigation.navigate('ViewPerson', {\n      id: person.id\n    });\n  }\n  function showEditPerson(person) {\n    props.navigation.navigate('EditPerson', {\n      id: person.id\n    });\n  }\n  function displayPeople() {\n    function showAddPerson() {\n      props.navigation.replace('Root', {\n        screen: 'AddPerson'\n      });\n    }\n    function showViewPerson(person) {\n      props.navigation.navigate('ViewPerson', {\n        id: person.id\n      });\n    }\n    function showEditPerson(person) {\n      props.navigation.navigate('EditPerson', {\n        id: person.id\n      });\n    }\n    function deletePerson(person) {\n      PopupOkCancel('Delete person?', `Are you sure you want to delete ${person.name}`, function () {\n        RoiDeletePerson(person.id).then(function (data) {\n          PopupOk('Person deleted', `${person.name} has been  deleted`);\n          refreshPersonList();\n        }).catch(function (error) {\n          PopupOk('API Error', 'Could not delete person');\n        });\n      }, function () {\n        console.log('Cancel - no delete for you!');\n      });\n    }\n    function displayConnectionMessage() {\n      console.log('displayConnectionMessage');\n      NetInfo.fetch().then(function (status) {\n        if (!status.isConnected) {\n          infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\n        }\n      });\n    }\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            children: p.name\n          }), _jsx(TextParagraph, {\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            children: p.phone\n          })]\n        }), _jsxs(ButtonContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"info\",\n            type: \"major\",\n            size: \"small\",\n            buttonStyle: Styles.personlistItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"edit\",\n            type: \"default\",\n            size: \"small\",\n            buttonStyle: Styles.personlistItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            buttonStyle: Styles.personlistItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","Button","SafeAreaView","Settings","RoiDeletePerson","RoiGetPeople","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","Styles","MyButton","ButtonContainer","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showAddPerson","navigation","replace","screen","showViewPerson","person","navigate","id","showEditPerson","displayPeople","deletePerson","name","displayConnectionMessage","NetInfo","fetch","status","isConnected","infoMessage","map","p","_p$department$name","_p$department","style","dataContainerHorizontal","children","personListItemDetails","department","phone","direction","text","type","size","buttonStyle","personlistItemButton","textStyle","personListItemButtonText","safeAreaView","personButtonContainer","onPress","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/project/PeterProj2/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView, Button } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiDeletePerson, RoiGetPeople} from '../utils/RoiApi';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\nimport { ButtonContainer } from '../components/ButtonContainer';\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n  // Refresh the person list data - call the API\n  function refreshPersonList() {\n\n    console.log(\"refresh person list\")\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n  }\n\n  function showAddPerson() {\n    props.navigation.replace('Root', {screen: \"AddPerson\"})\n  }\n  function showViewPerson(person) { \n    props.navigation.navigate('ViewPerson', {id: person.id})\n  }\n\n  function showEditPerson(person) {\n    props.navigation.navigate('EditPerson', {id: person.id})\n  }\n  // Display all people data\n  function displayPeople() {\n    function showAddPerson() {\n      // Navigate to AddPerson and replace the current screen\n      props.navigation.replace('Root', { screen: 'AddPerson' });\n    }\n  \n    function showViewPerson(person) {\n      // Navigate to ViewPerson and pass through the person's ID as a param\n      props.navigation.navigate('ViewPerson', { id: person.id });\n    }\n  \n    function showEditPerson(person) {\n      // Navigate to EditPerson and pass through the person's ID as a param\n      props.navigation.navigate('EditPerson', { id: person.id });\n    }\n  \n    /**\n     * Delete a person from the database\n     * @param {Person} person The person to delete.\n     */\n    function deletePerson(person) {\n      // Check if person should be deleted (confirm with user)\n      PopupOkCancel(\n        // Title and message\n        'Delete person?',\n        `Are you sure you want to delete ${person.name}`,\n  \n        // 0K - delete the person\n        () => {\n          // Delete the person using the API\n          RoiDeletePerson(person.id)\n            .then((data) => {\n              // Show confirmation that the person has been deleted\n              PopupOk('Person deleted', `${person.name} has been  deleted`);\n              // Refresh the person list\n              refreshPersonList();\n            })\n            .catch((error) => {\n              // Display error\n              PopupOk('API Error', 'Could not delete person');\n            });\n          // console.log('Ok.. deleting person');\n        },\n        // Cancel do nothing\n        () => {\n          console.log('Cancel - no delete for you!');\n        }\n      );\n    }\n  \n    // Display flash message banner if offline\n    function displayConnectionMessage() {\n      console.log('displayConnectionMessage');\n      // Get network connection status\n      NetInfo.fetch().then((status) => {\n        // Check if not connected to the Internet\n        if (!status.isConnected) {\n          // Display the flash message\n          infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\n        }\n      });\n    }\n    \n    // Loop through each item and turn into appropriate output and then return the result\n    return people.map(p => {\n\n      // Create an output view for each item\n      return (\n        <View key={p.id} style={Styles.dataContainerHorizontal}>\n          <View style={Styles.personListItemDetails}>\n            <TextParagraph>{p.name}</TextParagraph>\n            <TextParagraph>{p.department?.name ?? '---'}</TextParagraph>\n            <TextParagraph>{p.phone}</TextParagraph>\n          </View>\n\n        <ButtonContainer direction=\"column\">\n          <MyButton\n          text=\"info\"\n          type=\"major\"\n          size=\"small\"\n          buttonStyle={Styles.personlistItemButton}\n          textStyle={Styles.personListItemButtonText}\n          />\n             <MyButton\n             text=\"edit\"\n             type=\"default\"\n             size=\"small\"\n             buttonStyle={Styles.personlistItemButton}\n             textStyle={Styles.personListItemButtonText}\n             />\n             <MyButton\n             text=\"Delete\"\n             type=\"minor\"\n             size=\"small\"\n             buttonStyle={Styles.personlistItemButton}\n             textStyle={Styles.personListItemButtonText}\n             />\n        </ButtonContainer>\n                </View>\n      )\n\n    })\n    \n  }\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      \n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View>\n      \n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n          \n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n\n        <View>\n          {displayPeople()}\n        </View>\n\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}