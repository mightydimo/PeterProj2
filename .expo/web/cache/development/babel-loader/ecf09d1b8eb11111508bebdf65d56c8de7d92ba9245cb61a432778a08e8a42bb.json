{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Settings from \"../constants/Settings\";\nimport { RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { ButtonContainer } from \"../components/ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showAddPerson() {\n    console.log(\"show add person...\");\n  }\n  function show() {\n    console.log(\"show add person...\");\n  }\n  function displayPeople() {\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            children: p.name\n          }), _jsx(TextParagraph, {\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            children: p.phone\n          })]\n        }), _jsxs(ButtonContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"info\",\n            type: \"major\",\n            size: \"small\",\n            buttonStyle: Styles.personlistItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"edit\",\n            type: \"default\",\n            size: \"small\",\n            buttonStyle: Styles.personlistItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            buttonStyle: Styles.personlistItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","Button","SafeAreaView","Settings","RoiGetPeople","PopupOk","TextParagraph","TextH1","TextH2","Styles","MyButton","ButtonContainer","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showAddPerson","show","displayPeople","map","p","_p$department$name","_p$department","style","dataContainerHorizontal","children","personListItemDetails","name","department","phone","direction","text","type","size","buttonStyle","personlistItemButton","textStyle","personListItemButtonText","id","safeAreaView","personButtonContainer","onPress","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/project/PeterProj2/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView, Button } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiGetPeople } from '../utils/RoiApi';\nimport { PopupOk } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\nimport { ButtonContainer } from '../components/ButtonContainer';\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n  // Refresh the person list data - call the API\n  function refreshPersonList() {\n\n    console.log(\"refresh person list\")\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n  }\n\n  function showAddPerson() {\n    console.log(\"show add person...\")\n  }\n  function show() {\n    console.log(\"show add person...\")\n  }\n\n  // Display all people data\n  function displayPeople() {\n    \n    // Loop through each item and turn into appropriate output and then return the result\n    return people.map(p => {\n\n      // Create an output view for each item\n      return (\n        <View key={p.id} style={Styles.dataContainerHorizontal}>\n          <View style={Styles.personListItemDetails}>\n            <TextParagraph>{p.name}</TextParagraph>\n            <TextParagraph>{p.department?.name ?? '---'}</TextParagraph>\n            <TextParagraph>{p.phone}</TextParagraph>\n          </View>\n\n        <ButtonContainer direction=\"column\">\n          <MyButton\n          text=\"info\"\n          type=\"major\"\n          size=\"small\"\n          buttonStyle={Styles.personlistItemButton}\n          textStyle={Styles.personListItemButtonText}\n          />\n             <MyButton\n             text=\"edit\"\n             type=\"default\"\n             size=\"small\"\n             buttonStyle={Styles.personlistItemButton}\n             textStyle={Styles.personListItemButtonText}\n             />\n             <MyButton\n             text=\"Delete\"\n             type=\"minor\"\n             size=\"small\"\n             buttonStyle={Styles.personlistItemButton}\n             textStyle={Styles.personListItemButtonText}\n             />\n        </ButtonContainer>\n                </View>\n      )\n\n    })\n    \n  }\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      \n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View>\n      \n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n          \n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n\n        <View>\n          {displayPeople()}\n        </View>\n\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}